

	<div class="wrapper">
		<nav id="sidebar" class="sidebar js-sidebar">
			<div class="sidebar-content js-simplebar">
				<a class="sidebar-brand" href="index.html">
          <span class="align-middle">MICRON</span>
        </a>

				<ul class="sidebar-nav">
					<li class="sidebar-header">
						Pages
					</li>

					<li class="sidebar-item">
						<a class="sidebar-link" href="/admin/dashboard-view">
              <i class="align-middle" data-feather="sliders"></i> <span class="align-middle">Dashboard</span>
            </a>
					</li>

					<li class="sidebar-item">
						<a class="sidebar-link" href="/admin/product-view">
             <i class="align-middle" data-feather="shopping-cart"></i><span class="align-middle">Product</span>
            </a>
					</li>

					<li class="sidebar-item">
						<a class="sidebar-link" href="/admin/category-view">
              <i class="align-middle" data-feather="grid"></i> <span class="align-middle">Category</span>
            </a>
					</li>

				<li class="sidebar-item">
						<a class="sidebar-link" href="/admin/tags-view">
              <i class="align-middle" data-feather="tag"></i> <span class="align-middle">Tag</span>
            </a>
					</li>

					<li class="sidebar-item active">
						<a class="sidebar-link" href="/admin/sub-admin">
              <i class="align-middle" data-feather="user-plus"></i> <span class="align-middle">Sub-Admin</span>
            </a>
					</li>
				</ul>
			</div>
		</nav>

		<div class="main">
			<nav class="navbar navbar-expand navbar-light navbar-bg">
				<a class="sidebar-toggle js-sidebar-toggle">
          <i class="hamburger align-self-center"></i>
        </a>

				<div class="navbar-collapse collapse">
					<ul class="navbar-nav navbar-align">
						<li class="nav-item dropdown">
							<a class="nav-icon dropdown-toggle" href="#" id="alertsDropdown" data-bs-toggle="dropdown">
								
							</a>
							<div class="dropdown-menu dropdown-menu-lg dropdown-menu-end py-0" aria-labelledby="alertsDropdown">
								
								
							
							</div>
						</li>
						
						<li class="nav-item dropdown">
							<a class="nav-icon dropdown-toggle d-inline-block d-sm-none" href="#" data-bs-toggle="dropdown">
                <i class="align-middle" data-feather="settings"></i>
              </a>

							<a class="nav-link dropdown-toggle d-none d-sm-inline-block" href="#" data-bs-toggle="dropdown">
                <img src="/images/icons8-administrator-male-48.png" class="avatar img-fluid rounded me-1" alt="Charles Hall" /><b><span id="adminName" class="text-dark"></span></b>

              </a>
							<div class="dropdown-menu dropdown-menu-end">
								<a class="dropdown-item" href="pages-profile.html"><i class="align-middle me-1" data-feather="user"></i> Profile</a>
								<a class="dropdown-item" href="/admin/dashboard-view"><i class="align-middle me-1" data-feather="pie-chart"></i> Analytics</a>
								<a class="dropdown-item" href="#" id="logoutButton">
  <i class="align-middle me-1" data-feather="log-out"></i> Logout
</a>

							</div>
						</li>
					</ul>
				</div>
			</nav>
         


		 <main>
      <div class="container-fluid px-0">
        <div class="category-container">
          <div class="row">
            <div class="col-md-8">
              <div class="add-category-section">

                <form id="subAdminForm">
  <div class="tag-title d-flex justify-content-center">
    <h2>Add Sub Admin</h2>
  </div>

  <div class="form-group d-flex justify-content-center" style="margin-top:15px; margin-bottom: 15px;">
    <input type="text" id="adminNameInput" name="name" placeholder="Name" required style="width: 300px;" />
  </div>

  <div class="form-group d-flex justify-content-center" style="margin-bottom: 15px;">
    <input type="email" id="adminEmail" name="email" placeholder="Email" required style="width: 300px;" />
  </div>

  <div class="form-group d-flex justify-content-center" style="margin-bottom: 15px;">
    <select id="adminRole" name="role" required  class="styled-select" style="width: 300px; padding: 6px;">
      <option value="">Select Role</option>
      <option value="superadmin">Super Admin</option>
      <option value="subadmin">Sub Admin</option>
    </select>
  </div>

  <div class="form-group d-flex justify-content-center" style="margin-bottom: 15px;">
    <input type="password" id="adminPassword" name="password" placeholder="Password" required style="width: 300px;" />
  </div>

  <div class="form-group d-flex justify-content-center" style="margin-bottom: 15px;">
    <input type="password" id="adminConfirmPassword" name="confirmPassword" placeholder="Confirm Password" required style="width: 300px;" />
  </div>

  <div class="d-flex justify-content-center">
    <button type="submit" class="submit-btn-subAdmin" id="submitBtn">
      <span id="button-text">Submit</span>
      <div id="loading-spinner" class="text-center mt-1" style="display: none">
        <div class="spinner-border small-spinner" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
    </button>
  </div>
</form>

              </div>
            </div>
            <div class="col-md-4 px-0">
              <div
                class="category-listing"
                style="height:93vh; overflow-y: auto;"
              >
                <div class="category-list-style d-flex justify-content-center">
                  <h3 class="text-center">Product Tags</h3>
                </div>
                {{#each subAdmins}}
                  <div
                    class="list-box d-flex justify-content-between align-items-center position-relative p-2 mb-2"
                    style="border: 1px solid #ddd; border-radius: 5px;"
                  >
                    <div
  onclick="openEditSubAdminModal('{{_id}}', '{{username}}', '{{email}}')"
  style="cursor: pointer; flex-grow: 1;"
>
  <h6 class="mb-0 text-center">
    <div class="category-item">
      {{username}}
    </div>
  </h6>
</div>


                    <!-- Close (X) button -->
                    <button
                      class="position-absolute"
                      style="
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    width: 28px;
    height: 28px;
    border-radius: 50%;
    border: 1px solid red;
    background: transparent;
    font-size: 14px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  "
                      onclick="event.stopPropagation(); deleteTag('{{_id}}', '{{productTag}}')"
                    >
                      ‚ùå
                    </button>

                  </div>
                {{/each}}

              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
			

			

			{{!-- <footer class="footer">
				<div class="container-fluid">
					<div class="row text-muted">
						<div class="col-6 text-start">
							<p class="mb-0">
								<a class="text-muted" href="https://adminkit.io/" target="_blank"><strong>AdminKit</strong></a> &copy;
							</p>
						</div>
						<div class="col-6 text-end">
							<ul class="list-inline">
								<li class="list-inline-item">
									<a class="text-muted" href="https://adminkit.io/" target="_blank">Support</a>
								</li>
								<li class="list-inline-item">
									<a class="text-muted" href="https://adminkit.io/" target="_blank">Help Center</a>
								</li>
								<li class="list-inline-item">
									<a class="text-muted" href="https://adminkit.io/" target="_blank">Privacy</a>
								</li>
								<li class="list-inline-item">
									<a class="text-muted" href="https://adminkit.io/" target="_blank">Terms</a>
								</li>
							</ul>
						</div>
					</div>
				</div>
			</footer> --}}
		</div>
	</div>
  {{!-- edit-subadmin-modal-start --}}
<div class="modal fade" id="editSubAdminModal" tabindex="-1" aria-labelledby="editSubAdminModalLabel">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content p-3" style="background-color: #ffffff;">
      <div class="modal-header">
        <h5 class="modal-title" id="editSubAdminModalLabel">Edit SubAdmin</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <form id="editSubAdminForm">
          <input type="hidden" id="editSubAdminId" />

          <div class="mb-3">
            <label for="editSubAdminName" class="form-label">Name</label>
            <input type="text" class="form-control" id="editSubAdminName" required />
          </div>

          <div class="mb-3">
            <label for="editSubAdminEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="editSubAdminEmail" required />
          </div>
           <div class="change-password-section">
  <a href="javascript:void(0);" onclick="openChangePasswordModal()">
    <p><u>Change Password</u></p>
  </a>
</div>

         

          <div class="text-center">
            <button type="submit" class="cat-submit-btn" id="editSubAdminSubmitBtn">
              <span id="editSubAdminButtonText">Update</span>
              <div id="editSubAdminLoadingSpinner" class="text-center mt-1" style="display: none;">
                <div class="spinner-border small-spinner" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </div>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
{{!-- edit-subadmin-modal-end --}}
<!-- Change Password Modal -->
<div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-md">
    <div class="modal-content p-3" style="background-color: #ffffff;">
      <div class="modal-header">
        <h5 class="modal-title" id="changePasswordModalLabel">Change Password</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <form id="changePasswordForm">
          <input type="hidden" id="changePasswordSubAdminId" />

          <div class="mb-3">
            <label for="changePasswordEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="changePasswordEmail" readonly />
          </div>

          <div class="mb-3">
            <label for="newPassword" class="form-label">New Password</label>
            <input type="password" class="form-control" id="newPassword" required />
          </div>

          <div class="mb-3">
            <label for="confirmNewPassword" class="form-label">Confirm New Password</label>
            <input type="password" class="form-control" id="confirmNewPassword" required />
          </div>

          <div class="text-center">
            <button type="submit" class="cat-submit-btn" style="width: 434px;">
              <span id="changePasswordButtonText">Change</span>
              <div id="changePasswordLoadingSpinner" class="text-center mt-1" style="display: none;">
                <div class="spinner-border small-spinner" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </div>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>



	<script>
	document.addEventListener("DOMContentLoaded", () => {
  // Function to get cookie by name
  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
  }

  // Check if admin is logged in by checking the "adminToken" cookie
  const adminToken = getCookie("adminToken");

  console.log("adminToken:", adminToken);  // Log adminToken to verify
  
  if (adminToken) {
    // If the admin is logged in, redirect to the dashboard
    window.location.href = "/admin/dashboard-view";
  }

  // Retrieve admin name from cookies
  const adminName = getCookie("adminName");

  console.log("adminName:", adminName);  // Log adminName to verify

  // Set the admin name to the span with id "adminName" (if exists)
  if (adminName) {
    document.getElementById('adminName').textContent = adminName;
  } else {
    console.error("Admin Name not found in cookies.");
  }

  const logoutButton = document.getElementById('logoutButton');

  // Logout functionality with SweetAlert confirmation
  logoutButton.addEventListener("click", (event) => {
    event.preventDefault(); // Prevent default link behavior

    // Retrieve admin ID and name from cookies
    const adminId = getCookie("adminId");

    console.log("adminId:", adminId);  // Log adminId to verify

    // If admin ID and name are found, show SweetAlert
    if (adminId && adminName) {
      Swal.fire({
        title: `Are you sure, ${adminName}?`,
        text: `You will be logged out of your account!`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, logout!',
        cancelButtonText: 'Cancel',
      }).then((result) => {
        if (result.isConfirmed) {
          // Redirect to logout route after confirmation
          window.location.href = '/admin/logout'; // Or pass adminId if necessary
        }
      });
    } else {
      console.error("Admin ID or Admin Name not found in cookies.");
    }
  });
});

</script>
<script>
  const form = document.getElementById("subAdminForm");

form.addEventListener("submit", async function (e) {
  e.preventDefault();

  const nameInput = document.getElementById("adminNameInput");
  const emailInput = document.getElementById("adminEmail");
  const roleInput = document.getElementById("adminRole"); // ‚Üê Role select
  const passwordInput = document.getElementById("adminPassword");
  const confirmPasswordInput = document.getElementById("adminConfirmPassword");

  const username = nameInput?.value.trim();
  const email = emailInput?.value.trim();
  const role = roleInput?.value; // ‚Üê Get role
  const password = passwordInput?.value;
  const confirmPassword = confirmPasswordInput?.value;

  if (!role) {
    Swal.fire({
      icon: "warning",
      title: "Missing Role",
      text: "Please select a role before submitting.",
    });
    return;
  }

  if (password !== confirmPassword) {
    Swal.fire({
      icon: "error",
      title: "Password Mismatch",
      text: "Password and Confirm Password do not match.",
    });
    return;
  }

  // Button state
  const submitText = document.getElementById("button-text");
  const submitLoader = document.getElementById("loading-spinner");
  const submitBtn = document.getElementById("submitBtn");

  submitText.style.display = "none";
  submitLoader.style.display = "block";
  submitBtn.disabled = true;

  setTimeout(async () => {
    try {
      const response = await fetch("/admin/add-sub-admin", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, email, role, password }), // ‚Üê Include role
      });

      const result = await response.json();

      if (response.ok) {
        Swal.fire({
          icon: "success",
          title: "Success",
          text: "Sub admin added successfully!",
        });
        window.location.reload()
      } else {
        Swal.fire({
          icon: "error",
          title: "Error",
          text: result.message || "Failed to add sub admin.",
        });
      }
    } catch (error) {
      Swal.fire({
        icon: "error",
        title: "Server Error",
        text: "Something went wrong. Please try again later.",
      });
    } finally {
      submitText.style.display = "block";
      submitLoader.style.display = "none";
      submitBtn.disabled = false;
    }
  }, 1000);
});

</script>
<script>
  function openEditSubAdminModal(id, username, email) {
  document.getElementById('editSubAdminId').value = id || '';
  document.getElementById('editSubAdminName').value = username || '';
  document.getElementById('editSubAdminEmail').value = email || '';

  const modal = new bootstrap.Modal(document.getElementById('editSubAdminModal'));
  modal.show();
}

</script>
<script>
  function openChangePasswordModal() {
    const id = document.getElementById('editSubAdminId').value;
    const email = document.getElementById('editSubAdminEmail').value;

    document.getElementById('changePasswordSubAdminId').value = id;
    document.getElementById('changePasswordEmail').value = email;

    const modal = new bootstrap.Modal(document.getElementById('changePasswordModal'));
    modal.show();
  }
</script>

<script>
  const editForm = document.getElementById("editSubAdminForm");

  editForm.addEventListener("submit", async function (e) {
    e.preventDefault();

    const id = document.getElementById("editSubAdminId").value;
    const username = document.getElementById("editSubAdminName").value.trim();
    const email = document.getElementById("editSubAdminEmail").value.trim();

    // UI state
    const submitBtn = document.getElementById("editSubAdminSubmitBtn");
    const buttonText = document.getElementById("editSubAdminButtonText");
    const loadingSpinner = document.getElementById("editSubAdminLoadingSpinner");

    buttonText.style.display = "none";
    loadingSpinner.style.display = "block";
    submitBtn.disabled = true;

    // Delay the API call by 2 seconds (2000 milliseconds)
    setTimeout(async () => {
      try {
        const response = await fetch("/admin/edit-sub-admin", {
          method: "PUT", // or POST depending on your backend
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ id, username, email }),
        });

        const result = await response.json();

        if (response.ok) {
          Swal.fire({
            icon: "success",
            title: "Updated",
            text: "Sub Admin updated successfully!",
          });

          // Close modal
          const modal = bootstrap.Modal.getInstance(document.getElementById('editSubAdminModal'));
          modal.hide();

          // Optionally: reload data on the page
          // location.reload();
        } else {
          Swal.fire({
            icon: "error",
            title: "Update Failed",
            text: result.message || "Could not update sub admin.",
          });
        }
      } catch (err) {
        Swal.fire({
          icon: "error",
          title: "Server Error",
          text: "Something went wrong. Please try again later.",
        });
      } finally {
        buttonText.style.display = "block";
        loadingSpinner.style.display = "none";
        submitBtn.disabled = false;
      }
    }, 2000); // 2 seconds delay
  });
</script>

<script>
  const changePasswordForm = document.getElementById("changePasswordForm");

  changePasswordForm.addEventListener("submit", function (e) {
    e.preventDefault();

    const id = document.getElementById("changePasswordSubAdminId").value;
    const email = document.getElementById("changePasswordEmail").value;
    const newPassword = document.getElementById("newPassword").value;
    const confirmPassword = document.getElementById("confirmNewPassword").value;

    const buttonText = document.getElementById("changePasswordButtonText");
    const loadingSpinner = document.getElementById("changePasswordLoadingSpinner");

    // Validate password and confirm password
    if (newPassword !== confirmPassword) {
      Swal.fire({
        icon: "error",
        title: "Password Mismatch",
        text: "New password and confirm password do not match.",
      });
      return;
    }

    // Show loading
    buttonText.style.display = "none";
    loadingSpinner.style.display = "block";

    // Simulate delay before making API call
    setTimeout(async () => {
      try {
        const response = await fetch("/admin/change-password", {
          method: "PUT", // Adjust according to your backend (POST/PUT)
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ id, email, newPassword }),
        });

        const result = await response.json();

        if (response.ok) {
          Swal.fire({
            icon: "success",
            title: "Password Changed",
            text: "The password has been successfully updated.",
          });

          const modal = bootstrap.Modal.getInstance(document.getElementById("changePasswordModal"));
          modal.hide();
          changePasswordForm.reset();
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: result.message || "Something went wrong while updating the password.",
          });
        }
      } catch (err) {
        Swal.fire({
          icon: "error",
          title: "Server Error",
          text: "Something went wrong. Please try again later.",
        });
      } finally {
        buttonText.style.display = "block";
        loadingSpinner.style.display = "none";
      }
    }, 2000); // Delay 2 seconds
  });
</script>




<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>