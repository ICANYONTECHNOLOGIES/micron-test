<div class="wrapper">
		<nav id="sidebar" class="sidebar js-sidebar">
			<div class="sidebar-content js-simplebar">
				<a class="sidebar-brand" href="index.html">
          <span class="align-middle">MICRON</span>
        </a>

				<ul class="sidebar-nav">
					<li class="sidebar-header">
						Pages
					</li>

					<li class="sidebar-item">
						<a class="sidebar-link" href="/admin/dashboard-view">
              <i class="align-middle" data-feather="sliders"></i> <span class="align-middle">Dashboard</span>
            </a>
					</li>

					<li class="sidebar-item">
						<a class="sidebar-link" href="/admin/product-view">
             <i class="align-middle" data-feather="shopping-cart"></i><span class="align-middle">Product</span>
            </a>
					</li>

					<li class="sidebar-item active">
						<a class="sidebar-link" href="/admin/category-view">
              <i class="align-middle" data-feather="grid"></i> <span class="align-middle">Category</span>
            </a>
					</li>

				<li class="sidebar-item">
						<a class="sidebar-link" href="/admin/tags-view">
              <i class="align-middle" data-feather="tag"></i> <span class="align-middle">Tag</span>
            </a>
					</li>

					<li class="sidebar-item">
						<a class="sidebar-link" href="/admin/sub-admin">
              <i class="align-middle" data-feather="user-plus"></i> <span class="align-middle">Sub-Admin</span>
            </a>
					</li>
          <li class="sidebar-item">
						<a class="sidebar-link" href="/admin/user-query">
              <i class="align-middle" data-feather="user-plus"></i> <span class="align-middle">User Query</span>
            </a>
					</li>
				</ul>
			</div>
		</nav>

		<div class="main">
			<nav class="navbar navbar-expand navbar-light navbar-bg">
				<a class="sidebar-toggle js-sidebar-toggle">
          <i class="hamburger align-self-center"></i>
        </a>

				<div class="navbar-collapse collapse">
					<ul class="navbar-nav navbar-align">
						<li class="nav-item dropdown">
							<a class="nav-icon dropdown-toggle" href="#" id="alertsDropdown" data-bs-toggle="dropdown">
								
							</a>
							<div class="dropdown-menu dropdown-menu-lg dropdown-menu-end py-0" aria-labelledby="alertsDropdown">
								
								
							
							</div>
						</li>
						
						<li class="nav-item dropdown">
							<a class="nav-icon dropdown-toggle d-inline-block d-sm-none" href="#" data-bs-toggle="dropdown">
                <i class="align-middle" data-feather="settings"></i>
              </a>

							<a class="nav-link dropdown-toggle d-none d-sm-inline-block" href="#" data-bs-toggle="dropdown">
                <img src="/images/icons8-administrator-male-48.png" class="avatar img-fluid rounded me-1" alt="Charles Hall" /><b><span id="adminName" class="text-dark"></span></b>

              </a>
							<div class="dropdown-menu dropdown-menu-end">
								<a class="dropdown-item" href="pages-profile.html"><i class="align-middle me-1" data-feather="user"></i> Profile</a>
								<a class="dropdown-item" href="/admin/dashboard-view"><i class="align-middle me-1" data-feather="pie-chart"></i> Analytics</a>
								<a class="dropdown-item" href="#" id="logoutButton">
  <i class="align-middle me-1" data-feather="log-out"></i> Logout
</a>

							</div>
						</li>
					</ul>
				</div>
			</nav>

    <main>
      <div class="container-fluid px-0">
        <div class="category-container">
          <div class="row">
            <div class="col-md-8">
              <div class="add-category-section ">
              
                <form id="categoryForm">
                    <div class="category-title d-flex justify-content-center">
                  <h2>Add Category</h2>
                </div>
                  <div class="form-group category-input-text d-flex justify-content-center" style="margin-top: 23px;">
                    <input type="text" id="mainCategory" placeholder="Add new product category +" required />
                  </div>

                  <div class="form-group category-input-text d-flex justify-content-center" style="margin-top:14px;">
                    <div>
                      <input
                        type="text"
                        id="subCategoryInput"
                        placeholder="Add sub categories +"
                        onkeydown="handleKeyPress(event)"
                      />
                      <div class="sub-category-list" id="subCategoryList" style="margin-top: 10px;"></div>
                    </div>
                  </div>

                  <div class="d-flex justify-content-center">
                    <label for="categoryImage" class="custom-file-box " id="imagePreviewBox">
                      <span id="defaultText">Add a photo +</span>
                      <img src="/images/image 55.svg" class="label-img" alt="Placeholder" id="previewImage" />
                    </label>
                    <input type="file" id="categoryImage" accept="image/*" required />
                  </div>

                  <div class="d-flex justify-content-center">
                    <button type="submit" class="cat-submit-btn" id="submitBtn">
                      <span id="button-text">Submit</span>
                      <div id="loading-spinner" class="text-center mt-1" style="display: none">
                        <div class="spinner-border small-spinner" role="status">
                          <span class="visually-hidden">Loading...</span>
                        </div>
                      </div>
                    </button>
                  </div>
                </form>
              </div>
            </div>
            <div class="col-md-4 px-0">
              <div class="category-listing" style="height:93vh; overflow-y: auto;">
                <div class="category-list-style d-flex justify-content-center">
                  <h3 class="text-center">Product categories</h3>
                </div>
  {{#each allCategories}}
  <div class="list-box d-flex justify-content-between align-items-center position-relative p-2 mb-2" style="border: 1px solid #ddd; border-radius: 5px;">
    <div onclick="openEditModal('{{_id}}', '{{mainCategory}}', '{{subCategories}}', '{{imageUrl}}')" style="cursor: pointer; flex-grow: 1;">
      <h6 class="mb-0 text-center">
        <div class="category-item">
          {{mainCategory}}
        </div>
      </h6>
    </div>
    
    <!-- Close (X) button -->
<button class="position-absolute"
  style="
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    width: 28px;
    height: 28px;
    border-radius: 50%;
    border: 1px solid red;
    background: transparent;
    font-size: 14px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  "
  onclick="event.stopPropagation(); deleteCategory('{{_id}}', '{{mainCategory}}')">
  ‚ùå
</button>



  </div>
{{/each}}

              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</div>

{{!-- modal-start --}}
<div class="modal fade" id="editCategoryModal" tabindex="-1" aria-labelledby="editCategoryModalLabel">
      <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content p-3" style="background-color: #ffffff;">
          <div class="modal-header">
            <h5 class="modal-title" id="editCategoryModalLabel">Edit Category</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="editCategoryForm">
              <input type="hidden" id="editCategoryId" />

              <div class="mb-3">
                <label for="editMainCategory" class="form-label">Main Category</label>
                <input type="text" class="form-control" id="editMainCategory" />
              </div>

              <div class="mb-3">
                <label for="editSubCategoriesInput" class="form-label">Sub Categories</label>
                <input type="text" class="form-control" id="editSubCategoriesInput" placeholder="Type and press Enter" />
                <div id="editSubCategoryList" class="mt-2 d-flex flex-wrap gap-2"></div>
              </div>

              <div class="mb-3">
                <label class="form-label">Current Image</label>
                <div class="border rounded px-3 py-2">
                  <img 
                    id="editPreviewImage" 
                    src="" 
                    alt="Current Image" 
                    class="img-fluid w-100" 
                    style="max-height: 200px; object-fit: contain;" 
                    onclick="document.getElementById('editImageInput').click()" />
                </div>
                <input type="file" id="editImageInput" accept="image/*" style="display:none" onchange="previewImageEdit(event)" />
              </div>

          <div class="text-center">
           <button type="submit" class="cat-submit-btn" id="edit-submitBtn">
  <span id="edit-button-text">Update</span>
  <div id="edit-loading-spinner" class="text-center mt-1" style="display: none;">
    <div class="spinner-border small-spinner" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
</button>

          </div>
            </form>
          </div>
        </div>
      </div>
    </div>
{{!-- modal-end --}}

<script>
  const subCategories = [];
  let editIndex = -1;

  function handleKeyPress(e) {
    if (e.key === "Enter") {
      e.preventDefault();
      const input = document.getElementById("subCategoryInput");
      const value = input.value.trim();

      if (value) {
        if (editIndex > -1) {
          subCategories[editIndex] = value;
          editIndex = -1;
        } else if (!subCategories.includes(value)) {
          subCategories.push(value);
        }

        input.value = "";
        renderSubCategories();
      }
    }
  }

  function removeSubCategory(index) {
    subCategories.splice(index, 1);
    editIndex = -1;
    renderSubCategories();
  }

  function editSubCategory(index) {
    const input = document.getElementById("subCategoryInput");
    input.value = subCategories[index];
    editIndex = index;
    input.focus();
  }

  function renderSubCategories() {
    const list = document.getElementById("subCategoryList");
    list.innerHTML = "";

    subCategories.forEach((sub, index) => {
      const badge = document.createElement("div");
      badge.className = "sub-category-badge";

      const text = document.createElement("span");
      text.textContent = sub;
      text.onclick = () => editSubCategory(index);

      const removeBtn = document.createElement("button");
      removeBtn.innerHTML = "‚úñ";
      removeBtn.className = "close-btn";
      removeBtn.onclick = () => removeSubCategory(index);

      badge.appendChild(text);
      badge.appendChild(removeBtn);
      list.appendChild(badge);
    });
  }

  const input = document.getElementById('categoryImage');
  const previewImage = document.getElementById('previewImage');
  const defaultText = document.getElementById('defaultText');

  input.addEventListener('change', function () {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();

      reader.addEventListener('load', function () {
        previewImage.setAttribute('src', this.result);
        previewImage.style.display = 'block';
        defaultText.style.display = 'none';
      });

      reader.readAsDataURL(file);
    }
  });

  document.getElementById("categoryForm").addEventListener("submit", function (e) {
    e.preventDefault();

    const mainCategory = document.getElementById("mainCategory").value.trim().toUpperCase();
    const imageFile = document.getElementById("categoryImage").files[0];
    const submitText = document.getElementById("button-text");
    const submitLoader = document.getElementById("loading-spinner");
    const submitBtn = document.getElementById("submitBtn");

    submitText.style.display = "none";
    submitLoader.style.display = "block";
    submitBtn.disabled = true;

    setTimeout(() => {
      const formData = new FormData();
      formData.append("mainCategory", mainCategory);
      formData.append("subCategories", JSON.stringify(subCategories));
      if (imageFile) {
        formData.append("image", imageFile);
      }

      fetch("/admin/add-category", {
        method: "POST",
        body: formData,
      })
        .then((res) => res.json())
        .then((response) => {
          if (response.message === "Category already exists") {
            Swal.fire({
              title: "Error!",
              text: "Category already exists",
              icon: "error",
              confirmButtonText: "OK",
            });
            restoreButton();
            return;
          }

          Swal.fire({
            title: "Thank You!",
            text: "Your category has been added successfully.",
            icon: "success",
            confirmButtonText: "OK",
          }).then(() => {
            window.location.reload()
          });
        })
        .catch((error) => {
          Swal.fire({
            title: "Error!",
            text: "Something went wrong. Please try again later.",
            icon: "error",
            confirmButtonText: "OK",
          });
          console.error("Error:", error);
          restoreButton();
        });
    }, 2000);
  });

  function restoreButton() {
    document.getElementById("button-text").style.display = "inline";
    document.getElementById("loading-spinner").style.display = "none";
    document.getElementById("submitBtn").disabled = false;
  }

  let subCategoriesArray = [];
  let editingIndex = -1;

  function openEditModal(id, main, sub, img) {
    document.getElementById("editCategoryId").value = id;
    document.getElementById("editMainCategory").value = main;
    document.getElementById("editPreviewImage").src = img;

    subCategoriesArray = sub ? sub.split(',').map(s => s.trim()) : [];
    editingIndex = -1;

    renderSubCategoryList();

    const modal = new bootstrap.Modal(document.getElementById("editCategoryModal"));
    modal.show();
  }

  document.getElementById("editSubCategoriesInput").addEventListener("keydown", function (event) {
    if (event.key === "Enter" && this.value.trim()) {
      event.preventDefault();
      const value = this.value.trim();

      if (editingIndex > -1) {
        subCategoriesArray[editingIndex] = value;
        editingIndex = -1;
      } else {
        subCategoriesArray.push(value);
      }

      this.value = '';
      renderSubCategoryList();
    }
  });

  function renderSubCategoryList() {
    const list = document.getElementById("editSubCategoryList");
    list.innerHTML = '';
    subCategoriesArray.forEach((sub, index) => {
      const badge = document.createElement("div");
      badge.className = "custom-subcategory-badge";
      badge.innerHTML = `
        <span>${sub}</span>
        <i class="bi bi-pencil-square text-warning" onclick="editSubCategories(${index})"></i>
        <i class="bi bi-x-circle text-danger" onclick="removeSubCategories(${index})"></i>
      `;
      list.appendChild(badge);
    });
  }

  function removeSubCategories(index) {
    subCategoriesArray.splice(index, 1);
    editingIndex = -1;
    renderSubCategoryList();
  }

  function editSubCategories(index) {
    const input = document.getElementById("editSubCategoriesInput");
    input.value = subCategoriesArray[index];
    editingIndex = index;
    input.focus();
  }

  function previewImageEdit(event) {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function (e) {
        const previewImage = document.getElementById("editPreviewImage");
        previewImage.src = e.target.result;
        previewImage.alt = "New Image Preview";
      };
      reader.readAsDataURL(file);
    }
  }

  document.getElementById("editCategoryForm").addEventListener("submit", function (e) {
  e.preventDefault();

  const categoryId = document.getElementById("editCategoryId").value;
  const mainCategory = document.getElementById("editMainCategory").value.trim().toUpperCase();
  const imageFile = document.getElementById("editImageInput").files[0];
  const subCategories = subCategoriesArray;
  
  const submitText = document.getElementById("edit-button-text");
  const submitLoader = document.getElementById("edit-loading-spinner");
  const submitBtn = document.getElementById("edit-submitBtn");

  submitText.style.display = "none";
  submitLoader.style.display = "block";
  submitBtn.disabled = true;

  const formData = new FormData();
  formData.append("categoryId", categoryId);
  formData.append("mainCategory", mainCategory);
  formData.append("subCategories", JSON.stringify(subCategories));

  if (imageFile) {
    formData.append("image", imageFile);
  }

  setTimeout(async () => {
    try {
      const response = await fetch('/admin/edit-category', {
        method: 'PUT',
        body: formData,
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || 'Failed to update category');
      }

      Swal.fire({
        title: 'Success!',
        text: 'Category updated successfully',
        icon: 'success',
        confirmButtonText: 'OK'
      }).then(() => {
        // Hide modal (Bootstrap 5 way)
        const editCategoryModalEl = document.getElementById('editCategoryModal');
        const editCategoryModal = bootstrap.Modal.getInstance(editCategoryModalEl);
        if (editCategoryModal) {
          editCategoryModal.hide();
        }
        window.location.reload();
      });

    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        title: 'Error!',
        text: error.message || 'Something went wrong',
        icon: 'error',
        confirmButtonText: 'OK'
      });
      restoreEditButton();
    }
  }, 2000); // ‚Üê Now your setTimeout contains async function
});

// Button reset function
function restoreEditButton() {
  document.getElementById("edit-button-text").style.display = "inline";
  document.getElementById("edit-loading-spinner").style.display = "none";
  document.getElementById("edit-submitBtn").disabled = false;
}


function deleteCategory(categoryId, mainCategory) {
  Swal.fire({
    title: `Delete "${mainCategory}"?`,
    text: 'This category will be permanently deleted!',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, delete it!',
    cancelButtonText: 'Cancel'
  }).then(async (result) => {
    if (result.isConfirmed) {
      try {
        const response = await fetch(`/admin/delete-category/${categoryId}`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to delete category');
        }

        Swal.fire({
          title: 'Deleted!',
          text: `"${mainCategory}" was successfully deleted.`,
          icon: 'success',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.reload();
        });

      } catch (error) {
        console.error('Delete error:', error);
        Swal.fire({
          title: 'Error!',
          text: error.message || 'Something went wrong',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    }
  });
}

</script>
<script>
	document.addEventListener("DOMContentLoaded", () => {
  // Function to get cookie by name
  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
  }

  // Check if admin is logged in by checking the "adminToken" cookie
  const adminToken = getCookie("adminToken");

  console.log("adminToken:", adminToken);  // Log adminToken to verify
  
  if (adminToken) {
    // If the admin is logged in, redirect to the dashboard
    window.location.href = "/admin/dashboard-view";
  }

  // Retrieve admin name from cookies
const adminName = decodeURIComponent(getCookie("adminName") || "");

  console.log("adminName:", adminName);  // Log adminName to verify

  // Set the admin name to the span with id "adminName" (if exists)
  if (adminName) {
document.getElementById('adminName').textContent = decodeURIComponent(adminName);
  } else {
    console.error("Admin Name not found in cookies.");
  }

  const logoutButton = document.getElementById('logoutButton');

  // Logout functionality with SweetAlert confirmation
  logoutButton.addEventListener("click", (event) => {
    event.preventDefault(); // Prevent default link behavior

    // Retrieve admin ID and name from cookies
    const adminId = getCookie("adminId");

    console.log("adminId:", adminId);  // Log adminId to verify

    // If admin ID and name are found, show SweetAlert
    if (adminId && adminName) {
      Swal.fire({
        title: `Are you sure, ${adminName}?`,
        text: `You will be logged out of your account!`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, logout!',
        cancelButtonText: 'Cancel',
      }).then((result) => {
        if (result.isConfirmed) {
          // Redirect to logout route after confirmation
          window.location.href = '/admin/logout'; // Or pass adminId if necessary
        }
      });
    } else {
      console.error("Admin ID or Admin Name not found in cookies.");
    }
  });
});

</script>

<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>