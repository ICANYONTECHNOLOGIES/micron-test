<div class="wrapper">
  <nav id="sidebar" class="sidebar js-sidebar">
    <div class="sidebar-content js-simplebar">
      <a class="sidebar-brand" href="index.html">
        <span class="align-middle">MICRON</span>
      </a>

      <ul class="sidebar-nav">
        <li class="sidebar-header">
          Pages
        </li>

        <li class="sidebar-item">
          <a class="sidebar-link" href="/admin/dashboard-view">
            <i class="align-middle" data-feather="sliders"></i>
            <span class="align-middle">Dashboard</span>
          </a>
        </li>

        <li class="sidebar-item">
          <a class="sidebar-link" href="/admin/product-view">
            <i class="align-middle" data-feather="shopping-cart"></i><span
              class="align-middle"
            >Product</span>
          </a>
        </li>

        <li class="sidebar-item">
          <a class="sidebar-link" href="/admin/category-view">
            <i class="align-middle" data-feather="grid"></i>
            <span class="align-middle">Category</span>
          </a>
        </li>

        <li class="sidebar-item active">
          <a class="sidebar-link" href="/admin/tags-view">
            <i class="align-middle" data-feather="tag"></i>
            <span class="align-middle">Tag</span>
          </a>
        </li>

        <li class="sidebar-item">
          <a class="sidebar-link" href="/admin/sub-admin">
            <i class="align-middle" data-feather="user-plus"></i>
            <span class="align-middle">Sub-Admin</span>
          </a>
        </li>
      </ul>
    </div>
  </nav>

  <div class="main">
    <nav class="navbar navbar-expand navbar-light navbar-bg">
				<a class="sidebar-toggle js-sidebar-toggle">
          <i class="hamburger align-self-center"></i>
        </a>

				<div class="navbar-collapse collapse">
					<ul class="navbar-nav navbar-align">
						<li class="nav-item dropdown">
							<a class="nav-icon dropdown-toggle" href="#" id="alertsDropdown" data-bs-toggle="dropdown">
								
							</a>
							<div class="dropdown-menu dropdown-menu-lg dropdown-menu-end py-0" aria-labelledby="alertsDropdown">
								
								
							
							</div>
						</li>
						
						<li class="nav-item dropdown">
							<a class="nav-icon dropdown-toggle d-inline-block d-sm-none" href="#" data-bs-toggle="dropdown">
                <i class="align-middle" data-feather="settings"></i>
              </a>

							<a class="nav-link dropdown-toggle d-none d-sm-inline-block" href="#" data-bs-toggle="dropdown">
                <img src="/images/icons8-administrator-male-48.png" class="avatar img-fluid rounded me-1" alt="Charles Hall" /><b><span id="adminName" class="text-dark"></span></b>

              </a>
							<div class="dropdown-menu dropdown-menu-end">
								<a class="dropdown-item" href="pages-profile.html"><i class="align-middle me-1" data-feather="user"></i> Profile</a>
								<a class="dropdown-item" href="/admin/dashboard-view"><i class="align-middle me-1" data-feather="pie-chart"></i> Analytics</a>
								<a class="dropdown-item" href="#" id="logoutButton">
  <i class="align-middle me-1" data-feather="log-out"></i> Logout
</a>

							</div>
						</li>
					</ul>
				</div>
			</nav>

    <main>
      <div class="container-fluid px-0">
        <div class="category-container">
          <div class="row">
            <div class="col-md-8">
              <div class="add-category-section">

                <form id="tagForm">
                  <div class="tag-title d-flex justify-content-center">
                    <h2>Add Tag</h2>
                  </div>
                  <div
                    class="form-group category-input-text d-flex justify-content-center"
                    style="margin-top:15px; margin-bottom: 15px;"
                  >
                    <input
                      type="text"
                      id="productTag"
                      placeholder="Add Tag +"
                      required
                    />
                  </div>

                  <div class="d-flex justify-content-center">
                    <button type="submit" class="cat-submit-btn" id="submitBtn">
                      <span id="button-text">Submit</span>
                      <div
                        id="loading-spinner"
                        class="text-center mt-1"
                        style="display: none"
                      >
                        <div class="spinner-border small-spinner" role="status">
                          <span class="visually-hidden">Loading...</span>
                        </div>
                      </div>
                    </button>
                  </div>
                </form>
              </div>
            </div>
            <div class="col-md-4 px-0">
              <div
                class="category-listing"
                style="height:93vh; overflow-y: auto;"
              >
                <div class="category-list-style d-flex justify-content-center">
                  <h3 class="text-center">Product Tags</h3>
                </div>
                {{#each AllTags}}
                  <div
                    class="list-box d-flex justify-content-between align-items-center position-relative p-2 mb-2"
                    style="border: 1px solid #ddd; border-radius: 5px;"
                  >
                    <div
                      onclick="openEditTagModal('{{_id}}', '{{productTag}}')"
                      style="cursor: pointer; flex-grow: 1;"
                    >
                      <h6 class="mb-0 text-center">
                        <div class="category-item">
                          {{productTag}}
                        </div>
                      </h6>
                    </div>

                    <!-- Close (X) button -->
                    <button
                      class="position-absolute"
                      style="
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    width: 28px;
    height: 28px;
    border-radius: 50%;
    border: 1px solid red;
    background: transparent;
    font-size: 14px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  "
                      onclick="event.stopPropagation(); deleteTag('{{_id}}', '{{productTag}}')"
                    >
                      ‚ùå
                    </button>

                  </div>
                {{/each}}

              </div>
            </div>
          </div>
        </div>
      </div>
    </main>

    {{! <footer class="footer">
				<div class="container-fluid">
					<div class="row text-muted">
						<div class="col-6 text-start">
							<p class="mb-0">
								<a class="text-muted" href="https://adminkit.io/" target="_blank"><strong>AdminKit</strong></a> &copy;
							</p>
						</div>
						<div class="col-6 text-end">
							<ul class="list-inline">
								<li class="list-inline-item">
									<a class="text-muted" href="https://adminkit.io/" target="_blank">Support</a>
								</li>
								<li class="list-inline-item">
									<a class="text-muted" href="https://adminkit.io/" target="_blank">Help Center</a>
								</li>
								<li class="list-inline-item">
									<a class="text-muted" href="https://adminkit.io/" target="_blank">Privacy</a>
								</li>
								<li class="list-inline-item">
									<a class="text-muted" href="https://adminkit.io/" target="_blank">Terms</a>
								</li>
							</ul>
						</div>
					</div>
				</div>
			</footer> }}
  </div>
</div>

{{!-- modal-start --}}
<div class="modal fade" id="editTagModal" tabindex="-1" aria-labelledby="editTagModalLabel">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content p-3" style="background-color: #ffffff;">
      <div class="modal-header">
        <h5 class="modal-title" id="editTagModalLabel">Edit Tag</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editTagForm">
          <input type="hidden" id="editTagId" />
          
          <div class="mb-3">
            <label for="editTagInput" class="form-label">Tag</label>
            <input type="text" class="form-control" id="editTagInput" />
          </div>

          <div class="text-center">
           <button type="submit" class="cat-submit-btn" id="edit-submitBtn">
  <span id="edit-button-text">Update</span>
  <div id="edit-loading-spinner" class="text-center mt-1" style="display: none;">
    <div class="spinner-border small-spinner" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
</button>

          </div>
        </form>
      </div>
    </div>
  </div>
</div>

{{!-- modal-end --}}

<script>
  document.getElementById("tagForm").addEventListener("submit", function (e) {
    e.preventDefault();

    const productTag = document.getElementById("productTag").value.trim().toUpperCase();
    const submitText = document.getElementById("button-text");
    const submitLoader = document.getElementById("loading-spinner");
    const submitBtn = document.getElementById("submitBtn");

    submitText.style.display = "none";
    submitLoader.style.display = "block";
    submitBtn.disabled = true;
      
    setTimeout(() => {
        fetch("/admin/add-tag", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"  // Setting the correct header
            },
            body: JSON.stringify({ productTag })  // Sending the tag as JSON
        })
        .then((res) => res.json())
        .then((response) => {
            if (response.message === "Tag already exists") {
                Swal.fire({
                    title: "Error!",
                    text: "Tag already exists",
                    icon: "error",
                    confirmButtonText: "OK",
                });
                restoreButton();
                return;
            }

            Swal.fire({
                title: "Thank You!",
                text: "Your tag has been added successfully.",
                icon: "success",
                confirmButtonText: "OK",
            }).then(() => {
                window.location.reload();
            });
        })
        .catch((error) => {
            Swal.fire({
                title: "Error!",
                text: "Something went wrong. Please try again later.",
                icon: "error",
                confirmButtonText: "OK",
            });
            console.error("Error:", error);
            restoreButton();
        });
    }, 2000);
});

function restoreButton() {
    document.getElementById("button-text").style.display = "inline";
    document.getElementById("loading-spinner").style.display = "none";
    document.getElementById("submitBtn").disabled = false;
}

  // Function to open the modal and set the tag values
function openEditTagModal(id, tag) {
    document.getElementById("editTagId").value = id;
    document.getElementById("editTagInput").value = tag;

    const modal = new bootstrap.Modal(document.getElementById("editTagModal"));
    modal.show();
}

// Handle the form submission to update the tag
document.getElementById("editTagForm").addEventListener("submit", function (e) {
    e.preventDefault();

    const tagId = document.getElementById("editTagId").value;
    const updatedTag = document.getElementById("editTagInput").value.trim().toUpperCase();
    const submitText = document.getElementById("edit-button-text");
    const submitLoader = document.getElementById("edit-loading-spinner");
    const submitBtn = document.getElementById("edit-submitBtn");

    submitText.style.display = "none";
    submitLoader.style.display = "block";
    submitBtn.disabled = true;

    if (!updatedTag) {
        alert("Please enter a valid tag.");
        restoreEditButton();
        return;
    }

    setTimeout(() => {
        fetch('/admin/update-tag', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: tagId,
                productTag: updatedTag,
            }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.message === "Tag updated successfully") {
                Swal.fire({
                    title: "Success!",
                    text: "Tag updated successfully.",
                    icon: "success",
                    confirmButtonText: "OK",
                }).then(() => {
                   window.location.reload();
                });
            } else {
                Swal.fire({
                    title: "Error!",
                    text: data.message || "Something went wrong.",
                    icon: "error",
                    confirmButtonText: "OK",
                });
                restoreEditButton();
            }
        })
        .catch(error => {
            Swal.fire({
                title: "Error!",
                text: "An error occurred. Please try again later.",
                icon: "error",
                confirmButtonText: "OK",
            });
            console.error("Error:", error);
            restoreEditButton();
        });
    }, 2000);
});

function restoreEditButton() {
    document.getElementById("edit-button-text").style.display = "inline";
    document.getElementById("edit-loading-spinner").style.display = "none";
    document.getElementById("edit-submitBtn").disabled = false;
}



function deleteTag(tagId, productTag) {
  Swal.fire({
    title: `Delete "${productTag}"?`,
    text: 'This Tag will be permanently deleted!',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, delete it!',
    cancelButtonText: 'Cancel'
  }).then(async (result) => {
    if (result.isConfirmed) {
      try {
        const response = await fetch(`/admin/delete-tag/${tagId}`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to delete Tag');
        }

        Swal.fire({
          title: 'Deleted!',
          text: `"${productTag}" was successfully deleted.`,
          icon: 'success',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.reload();
        });

      } catch (error) {
        console.error('Delete error:', error);
        Swal.fire({
          title: 'Error!',
          text: error.message || 'Something went wrong',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    }
  });
}
</script>

<script>
	document.addEventListener("DOMContentLoaded", () => {
  // Function to get cookie by name
  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
  }

  // Check if admin is logged in by checking the "adminToken" cookie
  const adminToken = getCookie("adminToken");

  console.log("adminToken:", adminToken);  // Log adminToken to verify
  
  if (adminToken) {
    // If the admin is logged in, redirect to the dashboard
    window.location.href = "/admin/dashboard-view";
  }

  // Retrieve admin name from cookies
  const adminName = getCookie("adminName");

  console.log("adminName:", adminName);  // Log adminName to verify

  // Set the admin name to the span with id "adminName" (if exists)
  if (adminName) {
    document.getElementById('adminName').textContent = adminName;
  } else {
    console.error("Admin Name not found in cookies.");
  }

  const logoutButton = document.getElementById('logoutButton');

  // Logout functionality with SweetAlert confirmation
  logoutButton.addEventListener("click", (event) => {
    event.preventDefault(); // Prevent default link behavior

    // Retrieve admin ID and name from cookies
    const adminId = getCookie("adminId");

    console.log("adminId:", adminId);  // Log adminId to verify

    // If admin ID and name are found, show SweetAlert
    if (adminId && adminName) {
      Swal.fire({
        title: `Are you sure, ${adminName}?`,
        text: `You will be logged out of your account!`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, logout!',
        cancelButtonText: 'Cancel',
      }).then((result) => {
        if (result.isConfirmed) {
          // Redirect to logout route after confirmation
          window.location.href = '/admin/logout'; // Or pass adminId if necessary
        }
      });
    } else {
      console.error("Admin ID or Admin Name not found in cookies.");
    }
  });
});

</script>

<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>